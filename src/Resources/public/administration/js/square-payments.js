!function(){"use strict";var e={};e.p="bundles/squarepayments/",window?.__sw__?.assetPath&&(e.p=window.__sw__.assetPath+"/bundles/squarepayments/"),function(){let{Component:e,Mixin:t}=Shopware;e.register("square-api-test",{template:'<div>\n    <sw-button-process\n            :is-loading="isLoading"\n            :process-success="isSaveSuccessful"\n            @process-finish="saveFinish"\n            @click="check"\n    >\n        {{ $tc(\'Square.apiTest.button\') }}\n    </sw-button-process>\n</div>\n\n',props:{label:String,environment:{type:String,required:!0}},mixins:[t.getByName("notification")],data(){return{isLoading:!1,isSaveSuccessful:!1}},computed:{pluginConfig(){let e=this.$parent;for(;void 0===e.actualConfigData;)e=e.$parent;return e.actualConfigData.null}},methods:{saveFinish(){this.isSaveSuccessful=!1},getCurrentSalesChannelId(){let e=this.$parent;for(;void 0===e.currentSalesChannelId;)e=e.$parent;return e.currentSalesChannelId},async check(){this.isLoading=!0;let e={...this.pluginConfig,salesChannelId:this.getCurrentSalesChannelId(),environment:this.environment};try{let t=await fetch("/api/_action/squarepayments/api-test/check",{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify(e)}),a=await t.json();a.success?(this.isSaveSuccessful=!0,this.createNotificationSuccess({title:this.$tc("Square.apiTest.success.title"),message:this.$tc("Square.apiTest.success.message")})):this.createNotificationError({title:this.$tc("Square.apiTest.error.title"),message:a.message||this.$tc("Square.apiTest.error.message")})}catch(e){this.createNotificationError({title:"Square API Test",message:e.message||"Connection failed!"})}finally{this.isLoading=!1}}}});let{Component:a}=Shopware;a.register("square-webhook-manager",{template:'<div>\n    <div v-if="isLoading">\n        <sw-loader></sw-loader>\n    </div>\n    <div v-else>\n        <div v-if="error" class="sw-alert sw-alert--error">\n            {{ error }}\n        </div>\n        <div>\n            <p>Environment: <strong>{{ environment }}</strong></p>\n            <p>Status: <strong>{{ isActive ? \'Active\' : \'Inactive\' }}</strong></p>\n            <p v-if="webhookId">Webhook ID: <strong>{{ webhookId }}</strong></p>\n        </div>\n        <div>\n            <button v-if="!isActive" @click="activateWebhook" class="sw-button sw-button--primary">Activate Webhook</button>\n            <button v-if="isActive" @click="deactivateWebhook" class="sw-button sw-button--danger">Deactivate Webhook</button>\n        </div>\n    </div>\n</div>\n\n',props:{environment:{type:String,required:!0}},data(){return{isActive:!1,isLoading:!1,webhookId:null,error:null}},created(){this.fetchStatus()},methods:{async fetchStatus(){this.isLoading=!0;try{let e=await fetch(`/squarepayments/webhook/status?environment=${this.environment}`),t=await e.json();this.isActive=t.active,this.webhookId=t.webhookId,this.error=null}catch{this.error="Failed to fetch webhook status."}finally{this.isLoading=!1}},async activateWebhook(){this.isLoading=!0;try{let e=await fetch(`/squarepayments/webhook/create?environment=${this.environment}`,{method:"POST"}),t=await e.json();t.success?(this.isActive=!0,this.webhookId=t.webhookId,this.error=null):this.error=t.message||"Failed to create webhook."}catch{this.error="Failed to create webhook."}finally{this.isLoading=!1}},async deactivateWebhook(){this.isLoading=!0;try{let e=await fetch(`/squarepayments/webhook/delete?environment=${this.environment}`,{method:"POST"}),t=await e.json();t.success?(this.isActive=!1,this.webhookId=null,this.error=null):this.error=t.message||"Failed to delete webhook."}catch{this.error="Failed to delete webhook."}finally{this.isLoading=!1}}}});let{Component:r}=Shopware,{Criteria:s}=Shopware.Data;r.override("sw-order-detail-general",{template:'{% block sw_order_detail_general %}\n\n<sw-card v-if="showSquareLogTable" title="Square Payments Transactions" position-identifier="squarepayments-transactions">\n    <sw-data-grid\n        :dataSource="squarePaymentsTransactions"\n        :columns="squarePaymentsColumns"\n        :showSelection="false"\n        enable-columns-resize\n        :show-actions="false"\n    />\n</sw-card>\n\n\n    {% parent() %}\n{% endblock %}',inject:["repositoryFactory"],data(){return{squareLogTransactions:null,squarePaymentsColumns:[{property:"paymentId",label:"Payment ID"},{property:"type",label:"Type"},{property:"cardCategory",label:"Card Category"},{property:"paymentMethodType",label:"Payment Method Type"},{property:"amount",label:"Amount"},{property:"currency",label:"Currency"},{property:"expiryMonth",label:"Expiry Month"},{property:"expiryYear",label:"Expiry Year"},{property:"cardLast4",label:"Card Last 4"},{property:"statusCode",label:"Status"},{property:"lastUpdate",label:"Last Update"}],isSquarePayment:!1}},computed:{showSquareLogTable(){return this.isSquarePayment},squarePaymentsTransactions(){return this.squareLogTransactions?this.squareLogTransactions.map(e=>{let t=e.customFields||{};return{paymentId:e.paymentId||t.payment_id||"-",type:t.type||"-",cardCategory:t.card_category||"-",paymentMethodType:t.payment_method_type||"-",amount:t.amount?Number(t.amount).toFixed(2):"-",currency:t.currency?`${t.currency}`:"-",expiryMonth:t.expiry_month?String(parseInt(t.expiry_month,10)):"-",expiryYear:t.expiry_year||"-",cardLast4:t.card_last_4||"-",statusCode:t.status_code||"-",lastUpdate:this.formatDate(t.last_update)}}):[]}},async created(){await this.fetchSquareTransactions(),await this.checkIsSquarePaymentMethod()},methods:{async fetchSquareTransactions(){if(!this.order||!this.order.id){console.warn("Order not loaded yet.");return}let e=new s;e.addFilter(s.equals("orderId",this.order.id)),e.addSorting(s.sort("createdAt","DESC"));let t=this.repositoryFactory.create("squarepayments_transaction");try{this.squareLogTransactions=await t.search(e,Shopware.Context.api)}catch(e){console.error("Error fetching order transactions:",e)}},async checkIsSquarePaymentMethod(){if(!this.order||!this.order.transactions||0===this.order.transactions.length){this.isSquarePayment=!1;return}let e=!1;for(let t of this.order.transactions){if(!t.paymentMethodId)continue;let a=await this.getPaymentMethod(t.paymentMethodId);if(a&&"SquarePayments\\Gateways\\CreditCard"===a.handlerIdentifier){e=!0;break}}this.isSquarePayment=e},formatDate(e){if(!e)return"-";let t=new Date(e);return new Intl.DateTimeFormat("en-GB",{year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",hour12:!1}).format(t)},async getPaymentMethod(e){let t=this.repositoryFactory.create("payment_method"),a=new s;return a.addFilter(s.equals("id",e)),(await t.search(a,Shopware.Context.api)).first()}}});let n=Shopware.Classes.ApiService;var i=class extends n{constructor(e,t,a="squarepayments/api-test"){super(e,t,a),this.name="squareApiTestService"}check(e){return this.httpClient.post(`${this.getApiBasePath()}/check`,e,{headers:this.getBasicHeaders()}).then(e=>e.data)}getApiBasePath(){return this.apiEndpoint.replace(/\/$/,"")}};Shopware.Service().register("squareApiTestService",()=>new i(Shopware.Application.getContainer("init").httpClient,Shopware.Service("loginService")))}()}();